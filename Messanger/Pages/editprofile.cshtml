@page "/editprofile"
@model EditModel

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>edit profile</title>
        <link rel="stylesheet" href="~/edit/edit_styles.css">
        <link rel="shortcut icon" href="~/images/flat-style-circle-edit_icon-icons.com_66939.png" type="image/png">
    </head>
    <body>
        <a class="home-ref" href="/account"><img src="~/images/free-icon-home-button-9073243.png" alt=""></a>
        <div class="container">
            <div class="edit-box">
                <div class="edit-header">
                    <img src="~/images/flat-style-circle-edit_icon-icons.com_66939.png" alt="">
                    <span>Edit profile</span>
                </div>
                @if (Model.InvalidPassword)
                {
                    <div class="error-box">
                        invalid password!
                    </div>
                }
                <form asp-page="editprofile" method="post" class="edit-send-pannel">
                    <div class="form-group">
                        <label>Name</label>
                        <input asp-for="Name" type="text">
                    </div>
                    <div class="form-group">
                        <label>City</label>
                        <input asp-for="City" type="text">
                    </div>
                    <div class="form-group">
                        <label>Age</label>
                        <input asp-for="Age" type="number">
                    </div>
                    <div class="form-group">
                        <label>Current password</label>
                        <input asp-for="CurrentPassword" class="curr-pass" type="password">
                    </div>
                    <div class="form-group">
                        <label>New password</label>
                        <input asp-for="NewPassword" class="new-pass" type="password">
                    </div>
                    <div class="btn-block">
                        <button class="btn" type="submit">edit</button>
                    </div>
                </form>
            </div>
        </div>

        <script src="~/edit/edit_script.js"></script>
    </body>
</html>

@functions{
    [Authorize]
    public class EditModel : PageModel
    {
        private IUserRepository userRepository;

        public EditModel(IConfiguration configuration, IUserRepository userRepository)
        {
            this.userRepository = userRepository;

            Configuration = configuration;
        }

        public IConfiguration Configuration { get; set; }

        public User CurrentUser { get; set; }

        [BindProperty]
        public string Name { get; set; }

        [BindProperty]
        public string City { get; set; }

        [BindProperty]
        public int Age { get; set; }

        [BindProperty]
        public string CurrentPassword { get; set; }

        [BindProperty]
        public string NewPassword { get; set; }

        [BindProperty]
        public bool InvalidPassword { get; set; } = false;

        public async Task OnGetAsync()
        {
            string name = User.Identity.Name;

            string Email = User.FindFirst(ClaimTypes.Email).Value;

            // Dictionary<string, string> content = new Dictionary<string, string>()
            // {
            //         {"Name", name },
            //         {"Email", Email }
            // };

            ClaimsUserModel claimsUser = new ClaimsUserModel()
            {
                Name = name,

                Email = Email
            };


            // var answer = await Sender.PostAsync(content, "http://localhost:5100/api/user/current/get");

            // string jsonUser = await answer.Content.ReadAsStringAsync();

            // CurrentUser = JsonConvert.DeserializeObject<User>(jsonUser);

            CurrentUser = await userRepository.GetUserByNameAndEmailAsync(claimsUser);

            Name = CurrentUser.Name;

            City = CurrentUser.City;

            Age = CurrentUser.Age;

        }

        public async Task<IActionResult> OnPostAsync()
        {
            string name = User.Identity.Name;
            string Email = User.FindFirst(ClaimTypes.Email).Value;

            // Dictionary<string, string> content = new Dictionary<string, string>()
            // {
            //         {"Name", name },
            //         {"Email", Email }
            // };

            // var answer = await Sender.PostAsync(content, $"{Configuration["UserService"]}/api/user/current/get");

            // string jsonUser = await answer.Content.ReadAsStringAsync();

            // CurrentUser = JsonConvert.DeserializeObject<User>(jsonUser);

            ClaimsUserModel claimsUser = new ClaimsUserModel()
            {
                Name = name,

                Email = Email
            };

            CurrentUser = await userRepository.GetUserByNameAndEmailAsync(claimsUser);

            if (!string.IsNullOrEmpty(NewPassword))
            {
                string currentPasswordHash = PasswordHasher.GenerateHash(CurrentPassword);

                if (currentPasswordHash != CurrentUser.Password)
                {
                    InvalidPassword = true;

                    return Page();
                }
            }

            // Dictionary<string, string> content2 = new Dictionary<string, string>()
            // {
            //     {"Id", $"{CurrentUser.Id}" },
            //     {"Name", $"{Name}" },
            //     { "Age", $"{Age}"},
            //     {"City", $"{City}" },
            //     {"Password", $"{NewPassword}" }
            // };

            UpdateUserModel updateUser = new UpdateUserModel()
            {
                Id = CurrentUser.Id,

                Name = CurrentUser.Name,

                Age = CurrentUser.Age,

                City = CurrentUser.City,

                Password = NewPassword
            };

            // var answer2 = await Sender.PostAsync(content2, $"{Configuration["UserService"]}/api/user/update");

            // if (answer2.IsSuccessStatusCode)
            // {
            //     return Redirect("/messanger/profile");
            // }

            await userRepository.UpdateUserAsync(updateUser);

            return Page();

        }
    }
}
